# VitalGo Production Docker Compose Configuration
# This file is dynamically generated by the deploy script

version: '3.8'

services:
  vitalgo-backend:
    image: ${DOCKERHUB_USERNAME}/vitalgo-backend:latest
    container_name: vitalgo-backend-prod
    environment:
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@${RDS_ENDPOINT}:5432/${DB_NAME}
      ENVIRONMENT: production
      DEBUG: false
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      ALLOWED_ORIGINS: https://${DOMAIN_NAME},https://www.${DOMAIN_NAME}
      SKIP_DB_INIT: ${SKIP_DB_INIT:-true}
      BCRYPT_ROUNDS: 12
      LOG_LEVEL: INFO
    ports:
      - "8000:8000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    networks:
      - vitalgo-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  vitalgo-frontend:
    image: ${DOCKERHUB_USERNAME}/vitalgo-frontend:latest
    container_name: vitalgo-frontend-prod
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: https://${DOMAIN_NAME}
      NEXT_PUBLIC_ENVIRONMENT: production
    ports:
      - "3000:3000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - vitalgo-network
    depends_on:
      - vitalgo-backend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  vitalgo-network:
    driver: bridge
    name: vitalgo-prod-network

# Volumes for persistent data (if needed)
volumes:
  vitalgo-logs:
    driver: local
