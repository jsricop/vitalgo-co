# VitalGo Backend Dockerfile
# Multi-stage build for production optimization

FROM python:3.11-slim as builder

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    postgresql-client \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN pip install poetry

# Copy poetry files
COPY backend/pyproject.toml backend/poetry.lock ./

# Configure poetry
RUN poetry config virtualenvs.create false

# Install dependencies
RUN poetry install --only main --no-root

# Production stage
FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    postgresql-client \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy installed packages from builder
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application code
COPY backend/ ./

# Create non-root user
RUN useradd -m -u 1000 vitalgo && chown -R vitalgo:vitalgo /app

# Create entrypoint script
RUN cat > /app/entrypoint.sh << 'ENTRYPOINT_EOF'
#!/bin/bash
set -e

echo "ðŸš€ Starting VitalGo Backend..."

# Database initialization based on SKIP_DB_INIT flag
if [[ "${SKIP_DB_INIT:-true}" == "false" ]]; then
    echo "ðŸ”¥ MIGRATION MODE: Database initialization and migrations will be applied!"
    echo "ðŸ“Š Pre-migration database state check..."

    # Apply migrations
    echo "ðŸš€ Executing database migrations..."
    poetry run alembic upgrade head

    echo "ðŸ“Š Post-migration database state check..."
    echo "âœ… Database migration process completed"
else
    echo "âœ… SKIP_DB_INIT is true - Production data preserved, no migrations applied"
fi

# Start the application
echo "ðŸŒŸ Starting FastAPI server..."
exec poetry run uvicorn main:app --host 0.0.0.0 --port 8000 --workers 4
ENTRYPOINT_EOF

RUN chmod +x /app/entrypoint.sh && chown vitalgo:vitalgo /app/entrypoint.sh

USER vitalgo

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Set entrypoint
ENTRYPOINT ["/app/entrypoint.sh"]
